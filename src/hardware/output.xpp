/// [[Index]]

/// # Timer Output

/// ```c++
/// // PWM.
///
/// using Timer = nblib::hw::Timer0;
///
/// Timer::OutputA::Pin::mode(nblib::hw::Pin::Mode::output);
/// Timer::OutputB::Pin::mode(nblib::hw::Pin::Mode::output);
///
/// atomic([]() {
///     Timer::waveform(Timer::Waveform::fastPWM);
///     Timer::OutputA::mode(Timer::OutputA::Mode::set);
///     Timer::OutputB::mode(Timer::OutputB::Mode::set);
///     Timer::OutputA::value(128);
///     Timer::OutputB::value(128);
///     Timer::clock(Timer::Clock::div8);
/// });
/// ```

#define OutputX CAT(Output, ID)
#define OUTPUT_X(X) CAT(TIMER_N(OUTPUT), _, ID, _, X)

#ifndef OUTPUT_TESTS

/// ## class {{TimerN::OutputX}}
struct OutputX {
    /// #### type Pin
    /// The IO pin which relates to this output.
    #if DEFINED(OUTPUT_X(MODE_TOGGLE_ID))
        using Pin = OUTPUT_X(PIN);
    #endif

    /// #### enum {{TimerN::Mode}}
    /// * disconnected
    /// * toggle
    /// * clear
    /// * set
    #if DEFINED(OUTPUT_X(MODE_TOGGLE_ID))
        enum class Mode {
            disconnected = OUTPUT_X(MODE_DISCONNECTED_ID),
            toggle = OUTPUT_X(MODE_TOGGLE_ID),
            clear = OUTPUT_X(MODE_CLEAR_ID),
            set = OUTPUT_X(MODE_SET_ID),
        };
    #endif

    /// #### static void value(T v)
    static force_inline void value(REGTYPE(OUTPUT_X(REG)) v) {
        setReg_(REG(OUTPUT_X(REG)), v);
    }

    /// #### static T value()
    static force_inline REGTYPE(OUTPUT_X(REG))& value() {
        return getReg_(REG(OUTPUT_X(REG)));
    }

    /// #### static void mode([[TimerN::Mode]] m)
    #if DEFINED(OUTPUT_X(MODE_TOGGLE_ID))
        static force_inline void mode(Mode m) {
            setBit_(REG(OUTPUT_X(MODE_BIT_0_REG)), OUTPUT_X(MODE_BIT_0_BIT), int(m) & 0x01);
            setBit_(REG(OUTPUT_X(MODE_BIT_1_REG)), OUTPUT_X(MODE_BIT_1_BIT), int(m) & 0x02);
        }
    #endif

    #if OUTPUT_X(MODE_BIT_1_BIT)
        /// #### static void setCallback([[Callback]]<T\> function, T\* data)
        template <class T>
        static force_inline void setCallback(Callback<T> function, T* data = nullptr) {
            callback((Callback<void>)function, data);
        }

        /// #### static void callCallback()
        static force_inline void callCallback() {
            callback();
        }
    #endif

    /// #### static void intEnable(bool b)
    #if OUTPUT_X(MODE_BIT_1_BIT)
        static force_inline void intEnable(bool b) {
            setBit_(REG(OUTPUT_X(INT_ENABLE_REG)), OUTPUT_X(INT_ENABLE_BIT), b);
        }

        /// #### static bool intEnabled()
        static force_inline bool intEnabled() {
            return getBit_(REG(OUTPUT_X(INT_ENABLE_REG)), OUTPUT_X(INT_ENABLE_BIT));
        }
    #endif

    /// #### static bool intFlag()
    #if OUTPUT_X(MODE_BIT_1_BIT)
        static force_inline bool intFlag() {
            return getBit_(REG(OUTPUT_X(INT_FLAG_REG)), OUTPUT_X(INT_FLAG_BIT));
        }
    #endif

    /// #### static void intFlagClear()
    #if OUTPUT_X(MODE_BIT_1_BIT)
        static force_inline void intFlagClear() {
            clearFlagBit(REG(OUTPUT_X(INT_FLAG_REG)), OUTPUT_X(INT_FLAG_BIT));
        }
    #endif

private:

    static force_inline void callback(Callback<void> function = nullptr, void* data = nullptr) {
        static Callback<void> f = nullptr;
        static void* d = nullptr;

        if(function == nullptr) {
            if(f != nullptr) {
                f(d);
            }
        } else {
            f = function;
            d = data;
        }
    }
};

#else // OUTPUT_TESTS

TEST(CAT(TimerN, _, OutputX), value) {
    TEST_REG_WRITE(TimerN::OutputX::value(0x12));
    TEST_REG_READ_WRITE(TimerN::OutputX::value());
}

#if DEFINED(OUTPUT_X(MODE_TOGGLE_ID))
    TEST(CAT(TimerN, _, OutputX), mode) {
        TEST_REG_WRITE(TimerN::OutputX::mode(TimerN::OutputX::Mode::disconnected));
        TEST_REG_WRITE(TimerN::OutputX::mode(TimerN::OutputX::Mode::toggle));
        TEST_REG_WRITE(TimerN::OutputX::mode(TimerN::OutputX::Mode::clear));
        TEST_REG_WRITE(TimerN::OutputX::mode(TimerN::OutputX::Mode::set));
    }
#endif

#if OUTPUT_X(MODE_BIT_1_BIT)
    TEST(CAT(TimerN, _, OutputX), intEnable) {
        TEST_REG_WRITE(TimerN::OutputX::intEnable(true));
        TEST_REG_WRITE(TimerN::OutputX::intEnable(false));
    }

    TEST(CAT(TimerN, _, OutputX), intEnabled) {
        TEST_REG_READ_WRITE(TimerN::OutputX::intEnabled());
    }
#endif

#if OUTPUT_X(MODE_BIT_1_BIT)
    TEST(CAT(TimerN, _, OutputX), intFlag) {
        TEST_REG_READ_WRITE(TimerN::OutputX::intFlag());
    }
#endif

#if OUTPUT_X(MODE_BIT_1_BIT)
    TEST(CAT(TimerN, _, OutputX), intFlagClear) {
        TEST_REG_WRITE(TimerN::OutputX::intFlagClear());
    }
#endif

#endif // OUTPUT_TESTS

#undef OutputX
#undef OUTPUT_X
