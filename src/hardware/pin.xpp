/// [[Index]]

/// # {{Digital IO Pins}}

#include "chip.hpp"
#include "register.hpp"
#include "macros.hpp"

#ifndef NBLIB_BASE_PIN
#define NBLIB_BASE_PIN

namespace nblib::hw {

/// ## class {{Pin}}
struct Pin {
    Pin() = delete;
    Pin& operator=(const Pin&) = delete;
    Pin(const Pin&) = delete;

    /// #### enum {{Pin::Direction}}
    /// * input
    /// * output
    enum class Direction {
        input = 0,
        output = 1,
    };

    /// #### enum {{Pin::Value}}
    /// * low
    /// * high
    enum class Value {
        low = 0,
        high = 1,
    };
};

force_inline Pin::Value operator !(Pin::Value value) {
    return (value == Pin::Value::high) ? Pin::Value::low : Pin::Value::high;
}

} // nblib::hw

#endif // NBLIB_BASE_PIN

#ifdef PortX

#include "loopj"

#define N _J
#define PinN CAT(Pin, N)
#define PIN_N(A) CAT(CHIP_PIN_, X, N, _, A)

#ifdef _J
    #if DEFINED(CAT(CHIP_PIN_, X, N))

//------------------------------------------------------------------

#ifndef PIN_TESTS

/// ## Class {{PinN}} : Pin
struct PinN : Pin {
    PinN() = delete;
    PinN& operator=(const PinN&) = delete;
    PinN(const PinN&) = delete;

    /// #### static [[HardwareType]] getHardwareType()
    static constexpr HardwareType getHardwareType() {
        return HardwareType::pin;
    }

    #if REG_DEFINED(PIN_N(DIRECTION_REG))
        /// #### static void direction([[Pin::Direction]])
        static force_inline void direction(Direction d) {
            PIN_N(DIRECTION_REG)::setBit(PIN_N(DIRECTION_BIT), bool(d));
        }
    #endif

    #if REG_DEFINED(PIN_N(OUTPUT_REG))
        /// #### static void output([[Pin::Value]])
        static force_inline void output(Value v) {
            PIN_N(OUTPUT_REG)::setBit(PIN_N(OUTPUT_BIT), bool(v));
        }
    #endif

    #if REG_DEFINED(PIN_N(INPUT_REG))
        /// #### static [[Pin::Value]] input()
        static force_inline Value input() {
            return Value(PIN_N(INPUT_REG)::getBit(PIN_N(INPUT_BIT)));
        }
    #endif

    #if REG_DEFINED(PIN_N(OUTPUT_TOGGLE_REG))
        /// #### static void outputToggle()
        static force_inline void outputToggle() {
            PIN_N(OUTPUT_TOGGLE_REG)::setBit(PIN_N(OUTPUT_TOGGLE_BIT), true);
        }
    #endif

    #if REG_DEFINED(PIN_N(PULLUP_REG))
        /// #### static void pullup(bool enable)
        static force_inline void pullup(bool b) {
            PIN_N(PULLUP_REG)::setBit(PIN_N(PULLUP_BIT), b);
        }
    #endif

    #if REG_DEFINED(PIN_N(PULLDOWN_REG))
        /// #### static void pulldown(bool enable)
        static force_inline void pulldown(bool b) {
            PIN_N(PULLDOWN_REG)::setBit(PIN_N(PULLDOWN_BIT), b);
        }
    #endif
};

#else // PIN_TESTS

TEST(CAT(PortX, _, PinN), getHardwareType) {
    ASSERT_EQ(PortX::PinN::getHardwareType(), HardwareType::pin);
}

#if REG_DEFINED(PIN_N(DIRECTION_REG))
    TEST(CAT(PortX, _, PinN), direction) {
        TEST_REG_WRITE(PortX::PinN::direction(Pin::Direction::input));
        TEST_REG_WRITE(PortX::PinN::direction(Pin::Direction::output));
    }
#endif

#if REG_DEFINED(PIN_N(PULLUP_REG))
    TEST(CAT(PortX, _, PinN), pullup) {
        TEST_REG_WRITE(PortX::PinN::pullup(true));
        TEST_REG_WRITE(PortX::PinN::pullup(false));
    }
#endif

#if REG_DEFINED(PIN_N(PULLDOWN_REG))
    TEST(CAT(PortX, _, PinN), pulldown) {
        TEST_REG_WRITE(PortX::PinN::pulldown(true));
        TEST_REG_WRITE(PortX::PinN::pulldown(false));
    }
#endif

#if REG_DEFINED(PORT_X(OUTPUT_REG))
    TEST(CAT(PortX, _, PinN), output) {
        TEST_REG_WRITE(PortX::PinN::output(Pin::Value::low));
        TEST_REG_WRITE(PortX::PinN::output(Pin::Value::high));
    }
#endif

#if REG_DEFINED(PORT_X(INPUT_REG))
    TEST(CAT(PortX, _, PinN), input) {
        TEST_REG_READ_WRITE(PortX::PinN::input());
    }
#endif

#if REG_DEFINED(PIN_N(TOGGLE_REG))
    TEST(CAT(PortX, _, PinN), toggle) {
        TEST_REG_WRITE(PortX::PinN::toggle());
    }
#endif

#if REG_DEFINED(PIN_N(OUTPUT_TOGGLE_REG))
    TEST(CAT(PortX, _, PinN), outputToggle) {
        TEST_REG_WRITE(PortX::PinN::outputToggle());
    }
#endif

#endif // PIN_TESTS

//------------------------------------------------------------------

    #endif

    #include "pin.xpp"
#endif // _J

#undef N
#undef PinN
#undef PIN_N

#endif // PortX
