/// [[Index]]

/// # {{Digital IO Pins}}

#include "chip.hpp"
#include "register.hpp"
#include "macros.hpp"

#ifndef NBLIB_BASE_PIN
#define NBLIB_BASE_PIN

namespace nblib::hw {

/// ## class {{Pin}}
struct Pin {
    Pin() = delete;
    Pin& operator=(const Pin&) = delete;
    Pin(const Pin&) = delete;

    /// #### enum {{Pin::Value}}
    /// * low
    /// * high
    enum class Value {
        low = 0,
        high = 1,
    };
};

// force_inline Pin::Value operator !(Pin::Value value) {
//     return (value == Pin::Value::high) ? Pin::Value::low : Pin::Value::high;
// }

} // nblib::hw

#endif // NBLIB_BASE_PIN

#ifdef PortX

#include "loopj"

#define N _J
#define PinN CAT(Pin, N)
#define PIN_N(A) CAT(CHIP_PIN_, X, N, _, A)

#ifdef _J
    #if DEFINED(CAT(CHIP_PIN_, X, N))

//------------------------------------------------------------------

#ifndef PIN_TESTS

/// ## Class {{PinN}} : Pin
struct PinN : Pin {
    PinN() = delete;
    PinN& operator=(const PinN&) = delete;
    PinN(const PinN&) = delete;

    enum class Direction {
        #if DEFINED(PIN_N(DIRECTION_BIT))
            input = 0,
            output = 1,
        #elif DEFINED(PIN_N(DIRECTION_MASK))
            #if DEFINED(PIN_N(DIRECTION_ANALOG_ID))
                analog = PIN_N(DIRECTION_ANALOG_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_INPUT_FLOAT_ID))
                inputFloat = PIN_N(DIRECTION_INPUT_FLOAT_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_INPUT_PULL_ID))
                inputPull = PIN_N(DIRECTION_INPUT_PULL_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_OUTPUT_PUSH_PULL_2MHZ_ID))
                outputPushPull2MHz = PIN_N(DIRECTION_OUTPUT_PUSH_PULL_2MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_2MHZ_ID))
                outputOpenDrain2MHz = PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_2MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_OUTPUT_PUSH_PULL_10MHZ_ID))
                outputPushPull10MHz = PIN_N(DIRECTION_OUTPUT_PUSH_PULL_10MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_10MHZ_ID))
                outputOpenDrain10MHz = PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_10MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_OUTPUT_PUSH_PULL_50MHZ_ID))
                outputPushPull50MHz = PIN_N(DIRECTION_OUTPUT_PUSH_PULL_50MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_50MHZ_ID))
                outputOpenDrain50MHz = PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_50MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_2MHZ_ID))
                alternateOutputPushPull2MHz = PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_2MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_2MHZ_ID))
                alternateOutputOpenDrain2MHz = PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_2MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_10MHZ_ID))
                alternateOutputPushPull10MHz = PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_10MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_10MHZ_ID))
                alternateOutputOpenDrain10MHz = PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_10MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_50MHZ_ID))
                alternateOutputPushPull50MHz = PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_50MHZ_ID),
            #endif
            #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_50MHZ_ID))
                alternateOutputOpenDrain50MHz = PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_50MHZ_ID),
            #endif
        #endif
    };

    /// #### static [[HardwareType]] getHardwareType()
    static constexpr HardwareType getHardwareType() {
        return HardwareType::pin;
    }

    #if REG_DEFINED(PIN_N(DIRECTION_REG))
        /// #### static void direction([[Pin::Direction]])
        static force_inline void direction(Direction d) {
            #if DEFINED(PIN_N(DIRECTION_BIT))
                PIN_N(DIRECTION_REG)::setBit(PIN_N(DIRECTION_BIT), bool(d));
            #elif DEFINED(PIN_N(DIRECTION_MASK))
                using T = PIN_N(DIRECTION_REG)::Type;
                PIN_N(DIRECTION_REG)::setBits(PIN_N(DIRECTION_MASK), T(d));
            #endif
        }
    #endif

    #if REG_DEFINED(PIN_N(OUTPUT_REG)) || REG_DEFINED(PIN_N(OUTPUT_SET_REG))
        /// #### static void output([[Pin::Value]])
        static force_inline void output(Value v) {
            #if REG_DEFINED(PIN_N(OUTPUT_REG))
                PIN_N(OUTPUT_REG)::setBit(PIN_N(OUTPUT_BIT), bool(v));
            #else
                if(bool(v)) {
                    PIN_N(OUTPUT_SET_REG)::setBit(PIN_N(OUTPUT_SET_BIT), true);
                } else {
                    PIN_N(OUTPUT_CLEAR_REG)::setBit(PIN_N(OUTPUT_CLEAR_BIT), true);
                }
            #endif
        }
    #endif

    #if REG_DEFINED(PIN_N(INPUT_REG))
        /// #### static [[Pin::Value]] input()
        static force_inline Value input() {
            return Value(PIN_N(INPUT_REG)::getBit(PIN_N(INPUT_BIT)));
        }
    #endif

    #if REG_DEFINED(PIN_N(OUTPUT_TOGGLE_REG))
        /// #### static void outputToggle()
        static force_inline void outputToggle() {
            PIN_N(OUTPUT_TOGGLE_REG)::setBit(PIN_N(OUTPUT_TOGGLE_BIT), true);
        }
    #endif

    #if REG_DEFINED(PIN_N(PULLUP_REG))
        /// #### static void pullup(bool enable)
        static force_inline void pullup(bool b) {
            PIN_N(PULLUP_REG)::setBit(PIN_N(PULLUP_BIT), b);
        }
    #endif

    #if REG_DEFINED(PIN_N(PULLDOWN_REG))
        /// #### static void pulldown(bool enable)
        static force_inline void pulldown(bool b) {
            PIN_N(PULLDOWN_REG)::setBit(PIN_N(PULLDOWN_BIT), b);
        }
    #endif

    #if REG_DEFINED(PIN_N(INVERT_REG))
        /// #### static void invert(bool enable)
        static force_inline void invert(bool b) {
            PIN_N(INVERT_REG)::setBit(PIN_N(INVERT_BIT), b);
        }
    #endif
};

#else // PIN_TESTS

TEST(CAT(PortX, _, PinN), getHardwareType) {
    ASSERT_EQ(PortX::PinN::getHardwareType(), HardwareType::pin);
}

#if REG_DEFINED(PIN_N(DIRECTION_REG))
    TEST(CAT(PortX, _, PinN), direction) {
        #if DEFINED(PIN_N(DIRECTION_BIT))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::input));
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::output));
        #endif

        #if DEFINED(PIN_N(DIRECTION_ANALOG_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::analog));
        #endif
        #if DEFINED(PIN_N(DIRECTION_INPUT_FLOAT_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::inputFloat));
        #endif
        #if DEFINED(PIN_N(DIRECTION_INPUT_PULL_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::inputPull));
        #endif
        #if DEFINED(PIN_N(DIRECTION_OUTPUT_PUSH_PULL_2MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::outputPushPull2MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_2MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::outputOpenDrain2MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_OUTPUT_PUSH_PULL_10MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::outputPushPull10MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_10MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::outputOpenDrain10MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_OUTPUT_PUSH_PULL_50MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::outputPushPull50MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_OUTPUT_OPEN_DRAIN_50MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::outputOpenDrain50MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_2MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::alternateOutputPushPull2MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_2MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::alternateOutputOpenDrain2MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_10MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::alternateOutputPushPull10MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_10MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::alternateOutputOpenDrain10MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_PUSH_PULL_50MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::alternateOutputPushPull50MHz));
        #endif
        #if DEFINED(PIN_N(DIRECTION_ALT_OUTPUT_OPEN_DRAIN_50MHZ_ID))
            TEST_REG_WRITE(PortX::PinN::direction(PortX::PinN::Direction::alternateOutputOpenDrain50MHz));
        #endif
    }
#endif

#if REG_DEFINED(PIN_N(PULLUP_REG))
    TEST(CAT(PortX, _, PinN), pullup) {
        TEST_REG_WRITE(PortX::PinN::pullup(true));
        TEST_REG_WRITE(PortX::PinN::pullup(false));
    }
#endif

#if REG_DEFINED(PIN_N(PULLDOWN_REG))
    TEST(CAT(PortX, _, PinN), pulldown) {
        TEST_REG_WRITE(PortX::PinN::pulldown(true));
        TEST_REG_WRITE(PortX::PinN::pulldown(false));
    }
#endif

#if REG_DEFINED(PORT_X(OUTPUT_REG))
    TEST(CAT(PortX, _, PinN), output) {
        TEST_REG_WRITE(PortX::PinN::output(PortX::PinN::Value::low));
        TEST_REG_WRITE(PortX::PinN::output(PortX::PinN::Value::high));
    }
#endif

#if REG_DEFINED(PORT_X(INPUT_REG))
    TEST(CAT(PortX, _, PinN), input) {
        TEST_REG_READ_WRITE(PortX::PinN::input());
    }
#endif

#if REG_DEFINED(PIN_N(TOGGLE_REG))
    TEST(CAT(PortX, _, PinN), toggle) {
        TEST_REG_WRITE(PortX::PinN::toggle());
    }
#endif

#if REG_DEFINED(PIN_N(OUTPUT_TOGGLE_REG))
    TEST(CAT(PortX, _, PinN), outputToggle) {
        TEST_REG_WRITE(PortX::PinN::outputToggle());
    }
#endif

#if REG_DEFINED(PIN_N(INVERT_REG))
    TEST(CAT(PortX, _, PinN), invert) {
        TEST_REG_WRITE(PortX::PinN::invert(true));
        TEST_REG_WRITE(PortX::PinN::invert(false));
    }
#endif

#endif // PIN_TESTS

//------------------------------------------------------------------

    #endif

    #include "pin.xpp"
#endif // _J

#undef N
#undef PinN
#undef PIN_N

#endif // PortX
